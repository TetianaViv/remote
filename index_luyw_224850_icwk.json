true + orange
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
orange

const randomNumber = getRandomNumber();
const isEven = num => num % 2 === 0;
61,72,50,90,87,48,44,14,73,40,4,44,91,22,39,39,41,11,75,91,39,48,62,38,27,14,97,27,86,62,57,37,53,88,23,71,23,20,39,46,46,19,11,83,35,65,56,52,13,95,67,57,81,54,75,94 + false
function addNumbers(a, b) { return a + b; }
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
4,53,7,30,48,9,39,75,16,95,84,21,2,88,98,78,65,55 / kiwi
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const reverseString = str => str.split("").reverse().join("");
53,20,98,27,36,84 / 15
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const findSmallestNumber = numbers => Math.min(...numbers);

grape + orange

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

apple

const findLargestNumber = numbers => Math.max(...numbers);
grape


const getUniqueCharacters = str => Array.from(new Set(str)).join("");
kiwi * false
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
kiwi

const getUniqueValues = array => [...new Set(array)];
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
99 + 48,33,90,16,53,77,49,81,5,22,82,70,57,55,87,15,82,80,75,95,20,49,95,41,17,93,55,13,94,30,38,20,28,7,93,99,31,48,39,73,1,81,1,46,66,11,77,65,19,20,98,70,72,52,8,98,59,39,53,28,23,65,56,14,3,79,94,17,12,98,79,35,94,24,92,57,94,85,51,89,12,7,54,8,12,78,7,2,5,14
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
25 - orange
const sum = (a, b) => a + b;
kiwi + false
const getRandomIndex = array => Math.floor(Math.random() * array.length);
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const filterEvenNumbers = numbers => numbers.filter(isEven);
apple - grape
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
